$( document ).ready( function () {
  if ( $( "#boss" ).length ) {

var game = new Phaser.Game(800, 600, Phaser.AUTO, 'boss', { preload: preload, create: create, update: update });

function preload() {

  game.load.image('background', '<%= image_path( "sky.png" ) %>');
  game.load.image('ground', '<%= image_path( "platform.png" ) %>');
  game.load.image( 'heart_modal', '<%= image_path( "heart-200.png" ) %>' );
  game.load.image('bullet_1', '<%= image_path( "heart.png" ) %>');
  game.load.image( 'gun_modal', '<%= image_path( "space-gun.png" ) %>' );
  game.load.image('bullet_2', '<%= image_path( "laser-pew.png" ) %>');
  game.load.image( 'dead_hero', '<%= image_path( "dead-hero.png" ) %>' );

  game.load.spritesheet('hero', '<%= image_path( "hero.png" ) %>', 45, 48);
  game.load.spritesheet('boss', '<%= image_path( "boss.png" ) %>', 82, 80);

  game.world.setBounds(0, 0, 800, 600);


}

var player;
var platforms;
var ground;
var cursors;
var weapon;
var bullets;
var pewRate = 500;
var nextPew = 0;
var boss;
var heroHP = 100;
var bossHP = 100;
var shootButton;
var facing = "right";
var weapon = "bullet_2";
//
// var Bullet = function (game, key) {
//
//   Phaser.Sprite.call(this, game, 0, 0, key);
//
//   this.texture.baseTexture.scaleMode = PIXI.scaleModes.NEAREST;
//
//   this.anchor.set(0.5);
//
//   this.checkForWorldBounds
// }

function create() {

  game.physics.startSystem(Phaser.Physics.ARCADE);


  // TEMPORARY 2D BACKGROUND
  game.add.sprite(0, 0, 'background');
  var modal = new gameModal( game );
  modal.createModal({
            type:"modalWeapon",
            includeBackground: true,
            modalCloseOnInput: true,
            itemsArr: [
              					{
                          type: "text",
                              content: "Choose your weapon!",
                              fontFamily: "Lucky guy",
                              fontSize: 42,
                              color: "0xfb387c",
                              offsetY: -80
                        },
                        {
                              type: "image",
                              content: "heart_modal",
                              offsetY: 20,
                              offsetX: 80,
                              contentScale: 0.5,
                              callback: function(){
                                 weapon = "bullet_1";
                                 console.log( weapon );
                                 modal.hideModal( "modalWeapon" );
                              }
                        },
                        {
                              type: "image",
                              content: "gun_modal",
                              offsetY: 20,
                              offsetX: -80,
                              contentScale: 0.5,
                              callback: function () {
                                  weapon = "bullet_2";
                                  console.log( weapon );
                                  modal.hideModal( "modalWeapon" );
                              }
                        }
                      ]
   });
   modal.showModal("modalWeapon");

  // TEMPORARY 2D GROUND
  platforms = game.add.group();
  platforms.enableBody = true;
  ground = platforms.create(0, game.world.height - 64, 'ground');
  ground.scale.setTo(2, 2);
  ground.body.immovable = true;

  // HERO
  player = game.add.sprite(350, game.world.height = 0, 'hero');

  // enable physics on our hero
  game.physics.arcade.enable(player);

  // player physics properties
  player.body.bounce.y = 0;
  player.body.gravity.y = 150;
  player.body.collideWorldsBounds = true;

  //  Our two animations, walking left and right.
  player.animations.add('right', [0, 1, 2, 3], 10, true);
  player.animations.add('left', [5, 6, 7, 8], 10, true);

  // stop our player getting lost
  player.body.collideWorldBounds = true;

  // BOSS BITCH
  boss = game.add.sprite(500, game.world.height = 0, 'boss');

  game.physics.arcade.enable(boss);

  boss.body.bounce.y = 0.2;
  boss.body.gravity.y = 120;
  boss.body.collideWorldsBounds = true;

  boss.animations.add('right' [0, 1], 10, true);
  boss.animations.add('left', [3, 4], 10, true);

  boss.body.collideWorldBounds = true;

  // PEW PEW MOTHERFUCKER
  bullets = game.add.group();
  bullets.enableBody = true;
  bullets.physicsBodyType = Phaser.Physics.ARCADE;

  // bullets.createMultiple(1, 'bullet_1');
  bullets.setAll('checkWorldBounds', true);
  bullets.setAll('outofBoundsKill', true);


  // CONTROLS
  cursors = game.input.keyboard.createCursorKeys();
  shootButton = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);

  // LIFE POINTS
  heroHPStatus = game.add.text(30, 16, 'LIFE: 100', {fontSize: '32px', fill: '#FFF'});
  heroHPStatus.fixedToCamera = true;
  heroHPStatus.cameraOffset.setTo(30, 16);

  bossHPStatus = game.add.text(640, 16, 'LIFE: ??', {fontSize: '32px', fill: '#FFF'});
  bossHPStatus.fixedToCamera = true;
  bossHPStatus.cameraOffset.setTo(640, 16);
}

function update() {

  // collide player & boss with ground
  game.physics.arcade.collide( player, ground );
  game.physics.arcade.collide( boss, ground );

  // PLAYER MOVEMENT
  player.body.velocity.x = 0;

  if (cursors.left.isDown) {

    // Move to the left
    player.body.velocity.x = -150;
    player.animations.play('left');
    facing = 'left';
  }
  else if (cursors.right.isDown) {

    // Move to the right
    player.body.velocity.x = 150;
    player.animations.play('right');
    facing = 'right';
  } else if (cursors.up.isDown) {

    // Move to the right
    facing = 'up';
  }
  else {
    // Stand Still
    player.animations.stop();
    player.frame = 4;
  }

  // Player Jump
  if ( cursors.up.isDown && player.body.touching.down ) {
    player.body.velocity.y = -200;
    facing = "up";
  }

  if ( shootButton.isDown ) {
    pew();

    // make boss chase player
    game.physics.arcade.moveToObject( boss, player, 3000, 2000 ) ;

    if ( boss.body.velocity.x > 0 ) {
      boss.animations.play('left');
    } else {
      boss.animations.play('right');
    }

  }

  // Boss collides with character -hp
  game.physics.arcade.collide( player, boss, bossHit, null, this );

  // Character shoots boss -hp
  game.physics.arcade.collide( bullets, boss, directHit, null, this );

}

// Shooting function, obviously
function pew () {
  if ( game.time.now > nextPew && bossHP > 0 ) {
    nextPew = game.time.now + pewRate;

    var bullet;
    if ( facing === "right" ) {
      bullet = bullets.create(player.body.x + player.body.width / 2 + 20, player.body.y + player.body.height / 2 - 4, weapon );
    } else if ( facing === "left" ) {
      bullet = bullets.create(player.body.x + player.body.width / 2 - 20, player.body.y + player.body.height / 2 - 4, weapon );
    } else if ( facing === "up" ) {
      bullet = bullets.create(player.body.x + player.body.width / 2 + 20, player.body.y + player.body.height / 2 - 4, weapon );
    }

    game.physics.enable( bullet, Phaser.Physics.ARCADE );

    bullet.outofBoundsKill = true;
    bullet.anchor.setTo(0.5, 0.5);
    bullet.body.velocity.y = 0;

    if (facing === "right") {
      bullet.body.velocity.x = 400;
    } else if ( facing === "left" ){
      bullet.body.velocity.x = -400;
    } else if ( facing === "up" ){
      bullet.body.velocity.y = -400;
    }

  }
}

// When Player & Boss collide -= heroHP
function bossHit ( player, boss ) {
  heroHP -= 1;
  heroHPStatus.text = "LIFE: " + heroHP;

  if (heroHP <= 0) {
    player.kill();
    player = game.add.sprite( 200, game.world.height / 2, 'dead_hero' );
    game.physics.arcade.enable( player );
    game.physics.arcade.collide( player, boss );

    // sweet alert: lose
    swal({
      title: "Oh no!",
      text: "You lose :( Don't give up!",
      type: "error",
      showCancelButton: false,
      confirmButtonColor: "#DD6B55",
      confirmButtonText: "Try again",
      closeOnConfirm: false,
    },
    function(){
        window.location.href = '/pages/boss';
    });

    player = game.add.sprite( 200, game.world.height / 2, 'dead_hero' );
    game.physics.arcade.enable( player );
    game.physics.arcade.collide( player, boss );

  }
}

// When Player's bullet hits boss -= bossHP
  // ! ISSUE: WHY DOES MORE THAN ONE BULLET FIRE?!
function directHit() {
  bullets.forEach( function ( bullet ) {
    bullet.kill();
  } );

  bossHP -= 1;
  bossHPStatus.text = "LIFE: " + bossHP;

  console.log(bossHP);
  if (bossHP <= 0) {
    boss.kill();

    // sweet alert: win!
    swal({
      title: "KO! You win!!",
      text: "Congratulations!",
      type: "success",
      showCancelButton: false,
      confirmButtonColor: "#DD6B55",
      confirmButtonText: "Woohoo! I'm the best!",
      closeOnConfirm: false,
    },
    function(){
        window.location.href = '/';
    });
  }

}

}
} );

// This example uses the Phaser 2.2.2 framework

// Copyright Â© 2015 Michael Dobekidis
// Licensed under the terms of the MIT License
var reg = {};
var GameState = function(game) {
};

// Load images and sounds
GameState.prototype.preload = function() {
    this.load.image("bg","http://i221.photobucket.com/albums/dd22/djmid71/Untitled-1_zpswmvh3qea.jpg");
    this.load.image("m1", "http://i221.photobucket.com/albums/dd22/djmid71/M1_zpsdprlkpno.png");
    this.load.image("m2", "http://i221.photobucket.com/albums/dd22/djmid71/M2_zpsefls9w86.png");
    this.load.image("m3", "http://i221.photobucket.com/albums/dd22/djmid71/m3_zpszzqyjbpa.png");
    this.load.image("m4", "http://i221.photobucket.com/albums/dd22/djmid71/m4_zps5tnlccp0.png");
    this.load.image("m5", "http://i221.photobucket.com/albums/dd22/djmid71/m5_zpsdpz0cohz.png");
    this.load.image("m6", "http://i221.photobucket.com/albums/dd22/djmid71/m6_zpsvfvskl1d.png");	  this.load.image("gameover","http://i221.photobucket.com/albums/dd22/djmid71/gameover_zpse663rlsp.png");
  this.load.image("tryagain", "http://i221.photobucket.com/albums/dd22/djmid71/tryagain_zpszyvxhs8m.png");
  this.load.image("yes","http://i221.photobucket.com/albums/dd22/djmid71/yes_zpsfppqya7h.png");
  this.load.image("no","http://i221.photobucket.com/albums/dd22/djmid71/no_zpsnjisaare.png");
  this.load.image("twitter","http://i221.photobucket.com/albums/dd22/djmid71/twitter_zpsyadnfz48.png");
  this.load.image("facebook","http://i221.photobucket.com/albums/dd22/djmid71/facebook_zpsxiqll8e0.png");
 this.load.image("clear", "http://i221.photobucket.com/albums/dd22/djmid71/clear_zpspuy7nqhg.png");
  this.load.image("star", "http://i221.photobucket.com/albums/dd22/djmid71/star_zpseh4eqpzn.png");
  this.load.image("modalBG","http://i221.photobucket.com/albums/dd22/djmid71/modalBG_zpsgvwlxhmv.png");
};

// Setup the example
GameState.prototype.create = function() {
    // initiate the modal class
  	reg.modal = new gameModal(game);
    createModals();
};

function createModals() {
  //////// modal 4 //////////
  reg.modal.createModal({
            type:"modal4",
            includeBackground: true,
            modalCloseOnInput: true,
  itemsArr: [
    					{
                type: "text",
                    content: "Share the awesomeness!",
                    fontFamily: "Luckiest Guy",
                    fontSize: 42,
                    color: "0xfb387c",
                    offsetY: -80
              },
              {
                    type: "image",
                    content: "twitter",
                    offsetY: 20,
                    offsetX: 80,
                    contentScale: 0.8,
                    callback: function(){
                       window.open("https://twitter.com/intent/tweet?text=Cool%20modals%20%40%20http%3A%2F%2Fcodepen.io%2Fnetgfx%2Fpen%2FbNLgaX", 'twitter');
                    }
            },
                {
                    type: "image",
                    content: "facebook",
                    offsetY: 20,
                    offsetX: -80,
                    contentScale: 0.8,
                    callback: function () {
                        window.open("http://www.facebook.com/sharer.php?u=Cool%20modals%20%40%20http%3A%2F%2Fcodepen.io%2Fnetgfx%2Fpen%2FbNLgaX")
                    }
            }
            ]
   });
}


function showModal4() {
  reg.modal.showModal("modal4");
}

function countDown(fn, endFn) {
    var endFn = endFn || function(){};

    var _timer = game.time.create(false);
    _timer.start();
    _timer.onComplete.add(endFn);
    _timer.repeat(Phaser.Timer.SECOND, 5, fn, this);
    window.console.log("adding timer", game);
}

function updateCountdown() {
    var item = reg.modal.getModalItem("modal6", 3);
    var index = Number(item.text);

    window.console.log("index: ", index, item);

    item.setText(String(index - 1));
    item.update();
    item.x = game.width / 2 - (item.width / 2);
    item.y = game.height / 2 - (item.height / 2);
}

var game = new Phaser.Game(750, 380, Phaser.CANVAS, 'game');
game.state.add('game', GameState, true);
