$( document ).ready( function () {
  if ( $( "#leap" ).length ) {

var game = new Phaser.Game(800, 600, Phaser.AUTO, 'leap', { preload: preload, create: create, update: update });

function preload() {

  game.load.image('sky', '<%= asset_path( "assets/sky-fa.png") %>' );
  game.load.image('ground', '<%= asset_path ("assets/platform.png") %>' );
  game.load.image('cliff', '<%= asset_path ("assets/space-cliff.png") %>' );
  game.load.image('star', '<%= asset_path("assets/star.png") %>');
  game.load.spritesheet('hero', '<%= asset_path("assets/hero.png") %>', 45, 48);
  // game.load.spritesheet('enemy', 'assets/baddie.png', 32, 48);
  game.load.spritesheet('enemy', '<%= asset_path("assets/space-enemy.png") %>', 42, 30);

  game.world.setBounds(0, 0, 800, 2400);

}

var player;
var platforms;
var ground;
var cursors;
var stars;
var score = 0;
var scoreText;
var enemies;
var bg;
var life = 3;

function create() {


  // enabling physics - arcade
  game.physics.startSystem(Phaser.Physics.ARCADE);

  // generate background
  bg = game.add.sprite(0, 0, 'sky');
  bg.fixedToCamera = true;


  // platforms - ground and cliff
  platforms = game.add.group();

  // enabling physics on any objects with platform group
  platforms.enableBody = true;

  // generating the ground
  ground = platforms.create(0, game.world.height - 64, 'ground');

  // scale to fit the width of the game
  ground.scale.setTo(2, 2);

  // ground is immovable
  ground.body.immovable = true;

  // generating the cliff
  var cliff = platforms.create(0, 60, 'cliff');
  cliff.body.immovable = true;

  // creating our hero - check image file
  player = game.add.sprite(350, game.world.height = 0, 'hero');

  // enable physics on our hero
  game.physics.arcade.enable(player);

  // player physics properties
  player.body.bounce.y = 0;
  player.body.gravity.y = 10;
  player.body.collideWorldsBounds = true;

  //  Our two animations, walking left and right.
  player.animations.add('right', [0, 1, 2, 3], 10, true);
  player.animations.add('left', [5, 6, 7, 8], 10, true);

  // camera follow
  game.camera.follow(player);

  // stop our player getting lost
  player.body.collideWorldBounds = true;

  // create enemy
  enemies = game.add.group();
  enemies.enableBody = true;
  // barriers.body.immovable = true;

  // generate enemies

  var createEnemies = function (height) {
  for (var i = 0; i < 6; i++) {

    var enemy = enemies.create(i * 120, (Math.random() * 600) + height, 'enemy');
    enemy.body.immovable = true;

  }
};

createEnemies(100);
createEnemies(700);
createEnemies(1300);
createEnemies(2000);

  //  Our controls.
  cursors = game.input.keyboard.createCursorKeys();

  //  Finally some stars to collect
    stars = game.add.group();

    //  We will enable physics for any star that is created in this group
    stars.enableBody = true;

    //  Here we'll create 12 of them evenly spaced apart

    var createStars = function (height) {
    for (var i = 0; i < 12; i++)
    {
        //  Create a star inside of the 'stars' group
        var star = stars.create(i * 70, (Math.random() * 400) + height, 'star');

        //  Let gravity do its thing
        star.body.gravity.y = 0;

        //  This just gives each star a slightly random bounce value
        // star.body.bounce.y = 0.7 + Math.random() * 0.2;
    }
  };

  createStars(100);
  createStars(500);
  createStars(900);
  createStars(1300);
  createStars(1600);
  createStars(1900);

    // The Score

    scoreText = game.add.text(16, 16, 'score: 0', { fontSize: '32px', fill: '#FFF'});
    scoreText.fixedToCamera = true;
    scoreText.cameraOffset.setTo(16, 16);


    // Life Points
    lifeText = game.add.text(700, 16, 'life: 3', { fontSize: '32px', fill: '#FFF'});
    lifeText.fixedToCamera = true;
    lifeText.cameraOffset.setTo(700, 16);

}

function update() {

  // collide player with platforms
  game.physics.arcade.collide(player, platforms);
   game.physics.arcade.collide(stars, ground);
  //  game.physics.arcade.overlap(player, barriers);

  //  Reset the players velocity (movement)
    player.body.velocity.x = 0;

    if (cursors.left.isDown)
    {
        //  Move to the left
        player.body.velocity.x = -150;

        player.animations.play('left');
    }
    else if (cursors.right.isDown)
    {
        //  Move to the right
        player.body.velocity.x = 150;

        player.animations.play('right');
    }
    else
    {
        //  Stand still
        player.animations.stop();

        player.frame = 4;
    }

    //  Allow the player to jump if they are touching the ground.
    // if (cursors.up.isDown && player.body.touching.down)
    // {
    //     player.body.velocity.y = -350;
    // }

    //  Checks to see if the player overlaps with any of the stars, if he does call the collectStar function
    game.physics.arcade.overlap(player, stars, collectStar, null, this);

    // collide with barrier
    game.physics.arcade.collide(player, enemies, hitEnemy, null, this);

    // if player is on the ground

    if (player.position.y >= 1668){
      checkWin();
    }

}

function collectStar (player, star) {

    // Removes the star from the screen
    star.kill();

    //  Add and update the score
    score += 10;
    scoreText.text = 'Score: ' + score;

    checkWin();

}

function hitEnemy (player, enemy) {
  console.log("Life -1");
  // update life

  life -= 1;
  lifeText.text = "Life: " + life;

  if (life === 0) {
    player.kill();
    alert('you lose :(');
  }

}

function checkWin () {
    console.log("checkWin is ran");
    if (score === 200) {
    alert('You win!');
    }
    else{
      console.log("you are loser forever!");
    }
  }

}
} );
